This is Fedora's rubypick - a Ruby runtime chooser. You can use it
to execute Ruby programmes with any Fedora Ruby runtime.
These currently include:

Ruby - binary /usr/bin/ruby-mri - Installed
JRuby - binary /usr/bin/jruby - Not Installed (install with 'yum install jruby')

To run a specific runtime, use:
ruby _mri_ [params]
ruby _jruby_ [params]
The default is _mri_.

To run Ruby executables with shebang, such as 'gem', you can also use these:
gem _mri_ install foo
gem _jruby_ install foo

Or you can set environment variable RUBYPICK like this:
RUBYPICK=_mri_
RUBYPICK=_jruby_
and then MRI, resp. JRuby will be used for all ruby invocations.
This is still overriden by using the parameter as mentioned above.

If you don't want to use rubypick, you can always fall back to
using the above binaries.

Printing help for /usr/bin/ruby-mri:

Usage: /usr/bin/ruby-mri [switches] [--] [programfile] [arguments]
  -0[octal]       specify record separator (\0, if no argument)
  -a              autosplit mode with -n or -p (splits $_ into $F)
  -c              check syntax only
  -Cdirectory     cd to directory before executing your script
  -d, --debug     set debugging flags (set $DEBUG to true)
  -e 'command'    one line of script. Several -e's allowed. Omit [programfile]
  -Eex[:in], --encoding=ex[:in]
                  specify the default external and internal character encodings
  -Fpattern       split() pattern for autosplit (-a)
  -i[extension]   edit ARGV files in place (make backup if extension supplied)
  -Idirectory     specify $LOAD_PATH directory (may be used more than once)
  -l              enable line ending processing
  -n              assume 'while gets(); ... end' loop around your script
  -p              assume loop like -n but print line also like sed
  -rlibrary       require the library before executing your script
  -s              enable some switch parsing for switches after script name
  -S              look for the script using PATH environment variable
  -v              print the version number, then turn on verbose mode
  -w              turn warnings on for your script
  -W[level=2|:category]
                  set warning level; 0=silence, 1=medium, 2=verbose
  -x[directory]   strip off text before #!ruby line and perhaps cd to directory
  --jit           enable JIT for the platform, same as --yjit
  --mjit          enable C compiler-based JIT compiler (experimental)
  --yjit          enable in-process JIT compiler
  --copyright     print the copyright
  --dump={insns|parsetree|...}[,...]
                  dump debug information. see below for available dump list
  --enable={jit|rubyopt|...}[,...], --disable={jit|rubyopt|...}[,...]
                  enable or disable features. see below for available features
  --external-encoding=encoding, --internal-encoding=encoding
                  specify the default external or internal character encoding
  --backtrace-limit=num
                  limit the maximum length of backtrace
  --verbose       turn on verbose mode and disable script from stdin
  --version       print the version number, then exit
  --help          show this message, -h for short message
Dump List:
  insns           instruction sequences
  insns_without_opt
                  instruction sequences compiled with no optimization
  yydebug(+error-tolerant)
                  yydebug of yacc parser generator
  parsetree(+error-tolerant)
                  AST
  parsetree_with_comment(+error-tolerant)
                  AST with comments
Features:
  gems            rubygems (only for debugging, default: enabled)
  error_highlight error_highlight (default: enabled)
  did_you_mean    did_you_mean (default: enabled)
  syntax_suggest  syntax_suggest (default: enabled)
  rubyopt         RUBYOPT environment variable (default: enabled)
  frozen-string-literal
                  freeze all string literals (default: disabled)
  mjit            C compiler-based JIT compiler (default: disabled)
  yjit            in-process JIT compiler (default: disabled)
Warning categories:
  deprecated      deprecated features
  experimental    experimental features
MJIT options (experimental):
  --mjit-warnings Enable printing JIT warnings
  --mjit-debug    Enable JIT debugging (very slow), or add cflags if specified
  --mjit-wait     Wait until JIT compilation finishes every time (for testing)
  --mjit-save-temps
                  Save JIT temporary files in $TMP or /tmp (for testing)
  --mjit-verbose=num
                  Print JIT logs of level num or less to stderr (default: 0)
  --mjit-max-cache=num
                  Max number of methods to be JIT-ed in a cache (default: 100)
  --mjit-call-threshold=num
                  Number of calls to trigger JIT (for testing, default: 10000)
YJIT options:
  --yjit-stats    Enable collecting YJIT statistics
  --yjit-exec-mem-size=num
                  Size of executable memory block in MiB (default: 64)
  --yjit-call-threshold=num
                  Number of calls to trigger JIT (default: 10)
  --yjit-max-versions=num
                  Maximum number of versions per basic block (default: 4)
  --yjit-greedy-versioning
                  Greedy versioning mode (default: disabled)
